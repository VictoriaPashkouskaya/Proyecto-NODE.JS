hola mundo
2 +2
"2"+"2"
2+02
cd
},
    "start": "node index.js"
"scripts": {
        console.error('Error:', error);
    .catch(error => {
    })
        // Here you can handle the received questions, for example, display them on the page
        console.log('Received questions:', questions);
    .then(questions => {
fetchQuestions()
// Example usage of fetchQuestions()
}
    }
        console.error('Error fetching questions:', error);
    } catch (error) {
        return data.results;
        // Returning the array of questions
        const data = await response.json();
        const response = await fetch(apiUrl);
    try {
    const apiUrl = 'https://opentdb.com/api.php?amount=10';
async function fetchQuestions() {
document.body.appendChild(newDiv);
// Add the new div element to the end of the document body
`;
  </div>
    <a href="#" class="btn btn-primary">Go somewhere</a>
    <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
    <h5 class="card-title">Special title treatment</h5>
  <div class="card-body">
newDiv.innerHTML = `
// Create the inner content of the div
const btn = document.getElementById('btn btn-primary');
newDiv.style.width = '18rem';
newDiv.classList.add('card');
const newDiv = document.createElement('div');
let = name
console.log('vika')
});
    searchButton.addEventListener('click', searchBreed);
    const searchButton = document.getElementById('searchButton');
    // Event listener for the search button
    fetchRandomImage();
    fetchAllBreeds();
    // Initial function calls
    }
        fetchBreedImages(breed);
        }
            return;
            console.error('Breed input is empty');
        if (breed === '') {
        const breed = breedInput.value.trim().toLowerCase();
        const breedInput = document.getElementById('breedInput');
    function searchBreed() {
    // Function to search for a specific breed
    }
            });
                console.error(`Error fetching images of breed ${breed}:`, error);
            .catch(error => {
            })
                });
                    breedImages.innerHTML += `<img src="${image}" alt="${breed}">`;
                response.data.message.forEach(image => {
                breedImages.innerHTML = `<h2>All Images of ${breed}:</h2>`;
                const breedImages = document.getElementById('breedImages');
            .then(response => {
        axios.get(`https://dog.ceo/api/breed/${breed}/images`)
        }
            return;
            console.error('Breed is empty');
        if (!breed) {
    function fetchBreedImages(breed) {
    // Function to fetch all images of a specific breed
    }
            });
                console.error('Error fetching random image:', error);
            .catch(error => {
            })
                randomImage.innerHTML += `<img src="${response.data.message}" alt="Random Dog Image">`;
                randomImage.innerHTML = '<h2>Random Image:</h2>';
                const randomImage = document.getElementById('randomImage');
            .then(response => {
        axios.get('https://dog.ceo/api/breeds/image/random')
    function fetchRandomImage() {
    // Function to fetch a random image of a breed
    }
            });
                console.error('Error fetching breed list:', error);
            .catch(error => {
            })
                }
                    breedsList.innerHTML += `<p>${breed}</p>`;
                for (const breed in breeds) {
                breedsList.innerHTML = '<h2>All Breeds:</h2>';
                const breedsList = document.getElementById('breedsList');
                const breeds = response.data.message;
            .then(response => {
        axios.get('https://dog.ceo/api/breeds/list/all')
    function fetchAllBreeds() {
    // Function to fetch the list of all dog breeds
document.addEventListener('DOMContentLoaded', () => {
document.getElementById('showUsers').addEventListener('click', showUsers);
}
    });
        userList.appendChild(userItem);
        userItem.textContent = user.name;
        const userItem = document.createElement('p');
    users.forEach(user =>{
    userList.innerHTML = '';
    const userList = document.getElementById('userList');
    console.groupCollapsed(users);
function showUsers(){
});
    console.error('error', error);
.catch(error => {
})
    });
        console.log(usre.name)
    users.forEach(user => {
    console.log(users);
    users = responde.data;
.then(responde => {
axios.get('https://jsonplaceholder.typicode.com/users')
const users = [];
ext
painter.paintMultipleImages(allImages);
painter.paintSingleImage(randomMilitaryImage);
painter.paintSingleImage(randomCivilImage);
const allImages = gallery.getAll();
const randomMilitaryImage = gallery.getRandomMilitary();
const randomCivilImage = gallery.getRandomCivil();
// Пример использования методов класса Gallery и Painter
const gallery = new Gallery(civilImages, militaryImages);
// Создаем экземпляр класса Gallery и передаем массивы изображений
];
    // Добавьте остальные изображения военных транспортных средств
    'assets/military_plane_2.jpg',
    'assets/military_plane_1.jpg',
const militaryImages = [
];
    // Добавьте остальные изображения гражданских транспортных средств
    'assets/civil_plane_2.jpg',
    'assets/civil_plane_1.jpg',
const civilImages = [
// Создаем массивы изображений
const painter = new Painter();
// Создаем экземпляр класса Painter
}
    }
        });
            this.gallery.appendChild(imageTag);
            const imageTag = this.createImageTag(imageUrl);
        imageUrls.forEach(imageUrl => {
    paintMultipleImages(imageUrls) {
    }
        this.gallery.appendChild(imageTag);
        const imageTag = this.createImageTag(imageUrl);
    paintSingleImage(imageUrl) {
    }
        return picture;
        picture.appendChild(img);
        img.src = imageUrl;
        const img = document.createElement('img');
        const picture = document.createElement('picture');
    createImageTag(imageUrl) {
    }
        document.body.appendChild(this.gallery);
        this.gallery = document.createElement('section');
    createGallery() {
    }
        this.createGallery();
    constructor() {
class Painter {
// Создаем класс Painter
}
    }
        return this.civilImages.concat(this.militaryImages);
    getAll() {
    }
        return this.militaryImages[Math.floor(Math.random() * this.militaryImages.length)];
    getRandomMilitary() {
    }
        return this.civilImages[Math.floor(Math.random() * this.civilImages.length)];
    getRandomCivil() {
    }
        this.militaryImages = militaryImages;
        this.civilImages = civilImages;
    constructor(civilImages, militaryImages) {
class Gallery {
// Создаем класс Gallery
maya.defend(aztec.attack()); // Maya defends
aztec.attack();           // Aztec attacks Maya
aztec.defend(maya.attack()); // Aztec defends
maya.attack();            // Maya attacks Aztec
maya.drinkColaCao();      // Maya drinks Cola Cao
aztec.drinkNesquik();    // Aztec drinks Nesquik
// Perform the sequence of attacks as specified in the task
const aztec = new Aztec();
const maya = new Maya();
// Create instances of Maya and Aztec classes
}
    }
        console.log("Aztec drinks Nesquik and increases his life!");
        this.life += 10;
    drinkNesquik() {
    // Method to increase Aztec's life by 10
    }
        super(100, 20);
        // Set initial values for Aztec: 100 life and 20 power
    constructor() {
class Aztec extends Warrior {
// Define the Aztec class, extending the Warrior class
}
    }
        console.log("Maya drinks Cola Cao and increases her power!");
        this.power += 10;
    drinkColaCao() {
    // Method to increase Maya's power by 10
    }
        super(100, 20);
        // Set initial values for Maya: 100 life and 20 power
    constructor() {
class Maya extends Warrior {
// Define the Maya class, extending the Warrior class
}
    }
        console.log(`Remaining life: ${this.life}`);
        this.life -= damage;
    defend(damage) {
    // Method to decrease warrior's life by the given damage and print the remaining life
    }
        return this.power;
    attack() {
    // Method to return the warrior's power
    }
        this.power = power;
        this.life = life;
    constructor(life, power) {
class Warrior {
// Define the Warrior class
teacher.assign();
teacher.obtDetails();
const teacher = new Teacher("Bob", 45, "Male", "Physics", "Advanced");
// Crear una nueva instancia de Teacher
student.register();
student.obtDetails();
const student = new Student("Alice", 20, "Female", "Math", "A");
// Crear una nueva instancia de Student
}
    }
        console.log(`Teacher ${this.name} is assigned to teach ${this.subject} at level ${this.level}.`);
    assign() {
    }
        this.level = level;
        this.subject = subject;
        super(name, age, genre);
    constructor(name, age, genre, subject, level) {
class Teacher extends Person {
// Clase Teacher que hereda de Person
}
    }
        console.log(`Student ${this.name} is registered in course ${this.course} group ${this.group}.`);
    register() {
    }
        this.group = group;
        this.course = course;
        super(name, age, genre);
    constructor(name, age, genre, course, group) {
class Student extends Person {
// Clase Student que hereda de Person
}
    }
        console.log(`Genre: ${this.genre}`);
        console.log(`Age: ${this.age}`);
        console.log(`Name: ${this.name}`);
    obtDetails() {
    }
        this.genre = genre;
        this.age = age;
        this.name = name;
    constructor(name, age, genre) {
class Person {
// Clase base Person
teacher.assign();
teacher.obtDetails();
const teacher = new Teacher("Bob", 45, "Male", "Physics", "Advanced");
// Crear una nueva instancia de Teacher
student.register();
student.obtDetails();
const student = new Student("Alice", 20, "Female", "Math", "A");
// Crear una nueva instancia de Student
}
    }
        console.log(`Teacher ${this.name} is assigned to teach ${this.subject} at level ${this.level}.`);
    assign() {
    }
        this.level = level;
        this.subject = subject;
        super(name, age, genre);
    constructor(name, age, genre, subject, level) {
class Teacher extends Person {
// Clase Teacher que hereda de Person
}
    }
        console.log(`Student ${this.name} is registered in course ${this.course} group ${this.group}.`);
    register() {
    }
        this.group = group;
        this.course = course;
        super(name, age, genre);
    constructor(name, age, genre, course, group) {
class Student extends Person {
// Clase Student que hereda de Person
}
    }
        console.log(`Genre: ${this.genre}`);
        console.log(`Age: ${this.age}`);
        console.log(`Name: ${this.name}`);
    obtDetails() {
    }
        this.genre = genre;
        this.age = age;
        this.name = name;
    constructor(name, age, genre) {
class Person {
// Clase base Person
}
    }
        console.log(`Teacher ${this.name} is assigned to teach ${this.subject} at level ${this.level}.`);
    assign() {
    }
        this.level = level;
        this.subject = subject;
        super(name, age, genre);
    constructor(name, age, genre, subject, level) {
class Teacher extends Person {
}
    console.log(`Teacher ${this.name} is assigned to teach ${this.subject}`);
register() {
    }
this.group = group;
this.couse = couse;
this.genre = genre;
this.age = age;
this.name = name;
    constructor (name, age ,genre, course, group) {
class Student {
//2
person.obtDetails();
const person = new Person("Vika", 25, "trabajo");
}
    }
        console.log(`Genre: ${this.genre}`);
        console.log(`Age: ${this.age}`);
        console.log(`Name: ${this.name}`);
    obtDetails() {
    }
        this.genre = genre;
        this.age = age;
        this.name = name;
    constructor(name, age, genre) {
class Person {
//1
person.obtDetails();
const person = new Person("Vika", 25, "trabajo");
}
    }
        console.log(`Genre: ${this.genre}`);
        console.log(`Age: ${this.age}`);
        console.log(`Name: ${this.name}`);
    obtDetails() {
    }
        this.genre = genre;
        this.age = age;
        this.name = name;
    constructor(name, age, genre) {
class Person {
ext
person.obtDetalis();
const person = new Person ("Vika", 25, "trabajo")
}
    console.log(`gere: ${this.genre}`);
    console.log(`age: ${this.age}`);
    console.log(`Name: ${this.name}`);
obtDetalis() {
}
    this.genre = genre;
    this.age = age;
    this.name = name;
    constructor(name, age, genre) {
class Person {
persona.obtDetalis();
const person = new Person ("Vika", 25, "trabajo")
}
    console.log(`gere: ${this.genre}`);
    console.log(`age: ${this.age}`);
    console.log(`Name: ${this.name}`);
obtDetalis() {
}
    this.genre = genre;
    this.age = age;
    this.name = name;
    constructor(name, age, genre) {
class Person {
person.obtDetalis();
const person = new Person ("Vika","25","trabajo")
}
    console.log(`gere: ${this.genre}`);
    console.log(`age: ${this.age}`);
    console.log(`Name1: ${this.name1}`);
obtDetalis() {
}
    this.genre = genre;
    this.age = age;
    this.name1 = name1;
    constructor(name1, age, genre) {
class Person {
person.obtDetalis();
const person = new Person ("Vika","25","trabajo")
}
    console.log(`gere: ${this.genre}`);
    console.log(`age: ${this.age}`);
    console.log(`Name1: ${this.name1}`);
obtDetalis() {
}
    this.genre = genre;
    this.age = age;
    this.name1 = name1;
    constructor(name1, age, genre) {
class Person {
person.obtDetalis();
const person = new("Vika","25","trabajo")
}
    console.log(`gere: ${this.genre}`)
    console.log(`age: ${this.age}`)
    console.log(`Name1: ${this.name1}`)
obtDetalis() {
}
    this.genre = genre;
    this.age = age;
    this.name1 = name1;
    constructor(name1, age, genre) {
class person {